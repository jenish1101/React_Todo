Normal Todo Without Store It in Local Storage 

import React, { useState } from "react";

const TodoApp = () => {
  const [tasks, setTasks] = useState([]);
  const [task, setTask] = useState("");

  const addTask = () => {
    if (task.trim() !== "") {
      setTasks([...tasks, { id: Date.now(), text: task, completed: false }]);
      setTask("");
    }
  };

  const toggleTask = (id) => {
    setTasks(
      tasks.map((t) => (t.id === id ? { ...t, completed: !t.completed } : t))
    );
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter((t) => t.id !== id));
  };

  return (
    <div className="p-4 max-w-md mx-auto">
      <h1 className="text-xl font-bold mb-4">React To-Do List</h1>
      <div className="flex mb-4">
        <input
          type="text"
          value={task}
          onChange={(e) => setTask(e.target.value)}
          className="border p-2 flex-grow"
          placeholder="Enter a task..."
        />
        <button onClick={addTask} className="bg-blue-500 text-white p-2 ml-2">
          Add
        </button>
      </div>
      <ul>
        {tasks.map((t) => (
          <li
            key={t.id}
            className={`flex justify-between p-2 border mb-2 ${t.completed ? "line-through text-gray-500" : ""}`}
          >
            <span onClick={() => toggleTask(t.id)} className="cursor-pointer">
              {t.text}
            </span>
            <button onClick={() => deleteTask(t.id)} className="text-red-500">X</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TodoApp;







css 


/* Todo Container */
.todo-container {
    max-width: 400px;
    margin: 40px auto;
    padding: 20px;
    border-radius: 10px;
    background: #f8f9fa;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
  }
  
  /* Input Containers */
  .input-container {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
  }
  
  .task-input, .search-input, .edit-input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  /* Buttons */
  .add-btn, .edit-btn, .delete-btn, .save-btn {
    padding: 8px 12px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  .add-btn {
    background: #28a745;
    color: white;
  }
  
  .edit-btn {
    background: #ffc107;
    color: black;
  }
  
  .delete-btn {
    background: #dc3545;
    color: white;
  }
  
  .save-btn {
    background: #007bff;
    color: white;
  }
  
  /* Task List */
  .task-list {
    list-style: none;
    padding: 0;
  }
  
  .task-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    border-bottom: 1px solid #ddd;
    transition: background 0.3s;
  }
  
  .task-item.completed span {
    text-decoration: line-through;
    color: #aaa;
  }
  
  .button-group {
    display: flex;
    gap: 5px;
  }
  